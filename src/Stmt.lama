-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([state, w], stmt) {
  case stmt of
      Assn (name, expr) -> [state <- [name, evalExpr (state, expr)], w]
    | Seq (s1, s2) ->
        var res = eval ([state, w], s1);
        eval (res, s2)
    | Skip -> [state, w]
    | Read (name) ->
        var res = readWorld (w);
        [state <- [name, res.fst], res.snd]
    | Write (expr) -> [state, writeWorld (evalExpr (state, expr), w)]
    | While (expr, seq) ->
        case evalExpr (state, expr) of
          0 -> [state, w]
        | _ -> eval (eval ([state, w], seq), While (expr, seq))
        esac
    | DoWhile (seq, expr) -> eval (eval ([state, w], seq), While (expr, seq))
    | If (expr, seq1, seq2) ->
        case evalExpr (state, expr) of
          0 -> eval ([state, w], seq2)
        | _ -> eval ([state, w], seq1)
        esac
    | _ -> failure ("pam")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
