-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  foldl (fun ([stack, state, w], insn) {
    case insn of
      READ ->
        var res = readWorld (w);
        [res.fst:stack, state, res.snd]
    | WRITE ->
        case stack of
          v:tail -> [tail, state, writeWorld (v, w)]
        esac
    | BINOP (op) ->
        case stack of
          r:l:tail -> [evalBinop(op, l, r):tail, state, w]
        esac
    | LD (x) -> [state (x):stack, state, w]
    | ST (x) ->
        case stack of
          v:tail -> [tail, state <- [x, v], w]
        esac
    | CONST (num) -> [num:stack, state, w]
    esac
  }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExprInner (expr))
}

-- Returns buffer
fun compileExprInner (expr) {
  case expr of
    Var (name) -> singletonBuffer(LD (name))
  | Const (num) -> singletonBuffer(CONST (num))
  | Binop (op, l, r) -> compileExprInner(l) <+> compileExprInner(r) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMInner (stmt))
}

-- returns buffer
fun compileSMInner(stmt) {
  case stmt of
    Assn (name, expr) -> compileExprInner (expr) <+ ST (name)
  | Seq (s1, s2) -> compileSMInner (s1) <+> compileSMInner (s2)
  | Skip -> emptyBuffer()
  | Read (name) -> listBuffer({READ, ST (name)})
  | Write (expr) -> compileExprInner (expr) <+ WRITE
  esac
}
